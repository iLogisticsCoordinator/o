<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Procesador de Archivos de Traslado</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: #f9f9f9;
        }
        .container {
            background-color: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
            margin-bottom: 20px;
        }
        h1 {
            color: #2c3e50;
            text-align: center;
            margin-bottom: 30px;
        }
        .upload-container {
            border: 2px dashed #ccc;
            border-radius: 8px;
            padding: 40px 20px;
            text-align: center;
            margin-bottom: 20px;
            transition: border 0.3s ease;
            background-color: #f8f9fa;
        }
        .upload-container:hover {
            border-color: #007bff;
        }
        .upload-container.active {
            border-color: #28a745;
            background-color: #e9ffef;
        }
        .btn {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        .btn:hover {
            background-color: #0069d9;
        }
        .btn-secondary {
            background-color: #6c757d;
        }
        .btn-secondary:hover {
            background-color: #5a6268;
        }
        .btn-success {
            background-color: #28a745;
        }
        .btn-success:hover {
            background-color: #218838;
        }
        .btn-primary {
            background-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0069d9;
        }
        .btn-copy {
            background-color: #6c757d;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 0 4px 4px 0;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .btn-copy:hover {
            background-color: #5a6268;
        }
        .hidden {
            display: none;
        }
        .result-container {
            margin-top: 30px;
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
        }
        pre {
            background-color: #f1f1f1;
            padding: 15px;
            border-radius: 5px;
            overflow-x: auto;
            max-height: 500px;
            overflow-y: auto;
        }
        .result-table {
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
        }
        .result-table th, .result-table td {
            border: 1px solid #ddd;
            padding: 8px 12px;
            text-align: left;
        }
        .result-table th {
            background-color: #f2f2f2;
        }
        .result-table tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        .tab-container {
            margin-top: 20px;
        }
        .tab-buttons {
            display: flex;
            margin-bottom: 15px;
        }
        .tab-button {
            padding: 10px 20px;
            background-color: #f1f1f1;
            border: none;
            cursor: pointer;
            border-radius: 4px 4px 0 0;
            margin-right: 5px;
        }
        .tab-button.active {
            background-color: #007bff;
            color: white;
        }
        .tab-content {
            display: none;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 0 4px 4px 4px;
        }
        .tab-content.active {
            display: block;
        }
        .spinner {
            border: 4px solid rgba(0, 0, 0, 0.1);
            width: 36px;
            height: 36px;
            border-radius: 50%;
            border-left-color: #007bff;
            animation: spin 1s linear infinite;
            margin: 20px auto;
            display: none;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .alert {
            padding: 10px 15px;
            border-radius: 4px;
            margin-bottom: 15px;
        }
        .alert-success {
            background-color: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        .alert-danger {
            background-color: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        /* Estilos para la nueva pestaña de Complementar */
        .complementar-form {
            max-width: 100%;
            margin-bottom: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            font-weight: bold;
            margin-bottom: 5px;
        }

        .form-control {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 16px;
        }

        select.form-control {
            height: 45px;
        }

        .pvp-container {
            display: flex;
            align-items: center;
        }

        .pvp-prefix, .pvp-suffix {
            padding: 10px;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            font-weight: bold;
        }

        .pvp-prefix {
            border-radius: 4px 0 0 4px;
            border-right: none;
        }

        .pvp-suffix {
            border-radius: 0 4px 4px 0;
            border-left: none;
        }

        #pvp {
            border-radius: 0;
            width: 100px;
            text-align: right;
        }

        .actions {
            margin-top: 30px;
            margin-bottom: 30px;
        }

        .json-preview {
            margin-top: 30px;
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 15px;
        }

        .json-preview h3 {
            margin-top: 0;
            margin-bottom: 15px;
        }

        #complementarOutput {
            background-color: #f1f1f1;
            padding: 15px;
            border-radius: 5px;
            max-height: 400px;
            overflow-y: auto;
        }
        
        /* Estilos adicionales para los campos de ANEXOS */
        .form-group-title {
            margin-top: 30px;
            margin-bottom: 20px;
            border-bottom: 1px solid #ddd;
            padding-bottom: 10px;
        }

        .form-group-title h3 {
            margin-top: 0;
            margin-bottom: 10px;
            color: #2c3e50;
            font-size: 18px;
        }

        /* Estilos para los campos de número */
        input[type="number"].form-control {
            width: 120px;
        }
        
        /* Estilo para la sección de anexos */
        .anexos-section {
            background-color: #f8f9fa;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 20px;
            margin-bottom: 20px;
        }
        
        /* Estilo para anexos individuales */
        .anexo-item {
            background-color: #fff;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            padding: 15px;
            margin-bottom: 15px;
            position: relative;
        }
        
        .anexo-item .btn-remove {
            position: absolute;
            top: 10px;
            right: 10px;
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 25px;
            height: 25px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 14px;
        }
        
        /* Estilo para el botón de añadir anexo */
        .btn-add-anexo {
            background-color: #28a745;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 4px;
            cursor: pointer;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        /* Input con botón de copiar */
        .input-group {
            display: flex;
            width: 100%;
        }
        
        .input-group .form-control {
            border-radius: 4px 0 0 4px;
        }
        
        /* Estilos mejorados para la sección de complementar */
        .section-separator {
            border-top: 1px solid #e0e0e0;
            margin: 30px 0;
        }
        
        /* Tooltip personalizado para copiar */
        .copy-tooltip {
            position: relative;
        }
        
        .copy-tooltip .tooltip-text {
            visibility: hidden;
            width: 80px;
            background-color: #333;
            color: #fff;
            text-align: center;
            border-radius: 4px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -40px;
            opacity: 0;
            transition: opacity 0.3s;
            font-size: 12px;
        }
        
        .copy-tooltip .tooltip-text::after {
            content: "";
            position: absolute;
            top: 100%;
            left: 50%;
            margin-left: -5px;
            border-width: 5px;
            border-style: solid;
            border-color: #333 transparent transparent transparent;
        }
        
        .copy-tooltip:hover .tooltip-text {
            visibility: visible;
            opacity: 1;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Procesador de Archivos de Traslado</h1>
        
        <div id="uploadContainer" class="upload-container">
            <p>Arrastra y suelta aquí tu archivo Excel o</p>
            <input type="file" id="fileInput" accept=".xls,.xlsx" style="display: none;">
            <button id="browseButton" class="btn">Seleccionar archivo</button>
            <div id="fileName" style="margin-top: 15px; font-weight: bold;"></div>
        </div>
        
        <div id="spinner" class="spinner"></div>
        <div id="alertContainer"></div>
        
        <div id="resultContainer" class="result-container hidden">
            <div class="tab-container">
                <div class="tab-buttons">
                    <button class="tab-button active" data-tab="resumen">Resumen</button>
                    <button class="tab-button" data-tab="productos">Productos</button>
                    <button class="tab-button" data-tab="json">JSON</button>
                    <button class="tab-button" data-tab="complementar">Complementar</button>
                </div>
                
                <div id="resumenTab" class="tab-content active">
                    <h2>Información General</h2>
                    <table class="result-table">
                        <tbody id="resumenTable">
                            <!-- Datos generales serán insertados aquí -->
                        </tbody>
                    </table>
                </div>
                
                <div id="productosTab" class="tab-content">
                    <h2>Productos</h2>
                    <table class="result-table">
                        <thead>
                            <tr>
                                <th>Referencia</th>
                                <th>Descripción</th>
                                <th>O.P.</th>
                                <th>Talla</th>
                                <th>Color</th>
                                <th>Cantidad</th>
                                <th>Valor Unit.</th>
                                <th>Sub Total</th>
                            </tr>
                        </thead>
                        <tbody id="productosTable">
                            <!-- Productos serán insertados aquí -->
                        </tbody>
                    </table>
                </div>
                
                <div id="jsonTab" class="tab-content">
                    <h2>Datos en formato JSON</h2>
                    <div style="margin-bottom: 15px;">
                        <button id="downloadJson" class="btn btn-success">Descargar JSON Original</button>
                        <button id="downloadTransformedJson" class="btn btn-success" style="margin-left: 10px;">Descargar JSON Transformado</button>
                    </div>
                    <pre id="jsonOutput"></pre>
                </div>
                
                <div id="complementarTab" class="tab-content">
                    <h2 class="mb-4">Complementar información</h2>
                    <p class="mb-4">Edite los campos adicionales para completar la información del JSON transformado.</p>
                    
                    <form id="complementarForm" class="complementar-form">
                        <div class="row">
                            <!-- Primera columna -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="linea">LINEA:</label>
                                    <select id="linea" class="form-control">
                                        <option value="">Seleccione...</option>
                                        <option value="Fabian">Fabian</option>
                                        <option value="Kelly">Kelly</option>
                                        <option value="Estefany">Estefany</option>
                                        <option value="Cesar">Cesar</option>
                                        <option value="Maryi">Maryi</option>
                                        <option value="Julieth">Julieth</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="refprov">REFPROV:</label>
                                    <div class="input-group">
                                        <input type="text" id="refprov" class="form-control" readonly>
                                        <button type="button" id="copyRefprov" class="btn-copy copy-tooltip">
                                            <i class="bi bi-clipboard"></i>
                                            <span class="tooltip-text">Copiar</span>
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label for="referencia">REFERENCIA:</label>
                                    <input type="text" id="referencia" class="form-control">
                                </div>
                                
                                <div class="form-group">
                                    <label for="pvp">PVP:</label>
                                    <div class="pvp-container">
                                        <span class="pvp-prefix">$</span>
                                        <input type="number" id="pvp" class="form-control" min="1" max="999">
                                        <span class="pvp-suffix">.900</span>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Segunda columna -->
                            <div class="col-md-6">
                                <div class="form-group">
                                    <label for="tipo">TIPO:</label>
                                    <select id="tipo" class="form-control">
                                        <option value="">Seleccione...</option>
                                        <option value="FULL">FULL</option>
                                        <option value="DEVOLUCIÓN">DEVOLUCIÓN</option>
                                    </select>
                                </div>
                                
                                <div class="form-group">
                                    <label for="prenda">PRENDA:</label>
                                    <input type="text" id="prenda" class="form-control">
                                </div>
                                
                                <div class="form-group">
                                    <label for="genero">GÉNERO:</label>
                                    <select id="genero" class="form-control">
                                        <option value="">Seleccione...</option>
                                        <option value="DAMA">DAMA</option>
                                        <option value="HOMBRE">HOMBRE</option>
                                        <option value="NIÑO">NIÑO</option>
                                        <option value="NIÑA">NIÑA</option>
                                        <option value="HOGAR">HOGAR</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Sección de ANEXOS con múltiples items -->
                        <div class="form-group-title">
                            <h3>ANEXOS</h3>
                        </div>
                        
                        <div id="anexosContainer">
                            <!-- Anexos serán insertados aquí dinámicamente -->
                        </div>
                        
                        <button type="button" id="addAnexoBtn" class="btn-add-anexo">
                            <i class="bi bi-plus-circle"></i> Agregar Anexo
                        </button>
                        
                        <div class="section-separator"></div>
                        
                        <div class="actions">
                            <button type="button" id="actualizarJson" class="btn btn-primary">Actualizar JSON</button>
                            <button type="button" id="descargarComplementado" class="btn btn-success ms-2">Descargar JSON Complementado</button>
                        </div>
                    </form>
                    
                    <div class="json-preview">
                        <h3>Vista previa del JSON complementado</h3>
                        <pre id="complementarOutput"></pre>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <!-- Template para nuevos anexos -->
    <template id="anexoTemplate">
        <div class="anexo-item">
            <button type="button" class="btn-remove">×</button>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="anexo-documento-{id}">DOCUMENTO:</label>
                        <input type="text" id="anexo-documento-{id}" class="anexo-documento form-control" readonly>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="anexo-tipo-{id}">TIPO DE ANEXO:</label>
                        <select id="anexo-tipo-{id}" class="anexo-tipo form-control">
                            <option value="">Seleccione...</option>
                            <option value="PROMO">PROMO</option>
                            <option value="MUESTRA">MUESTRA</option>
                        </select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label for="anexo-cantidad-{id}">CANTIDAD:</label>
                        <input type="number" id="anexo-cantidad-{id}" class="anexo-cantidad form-control" min="0">
                    </div>
                </div>
            </div>
        </div>
    </template>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Función para crear el JSON transformado con la estructura solicitada (corregida)
        function createTransformedJSON(originalData) {
            // Formatear la fecha para mostrar solo DD/MM/YYYY
            let fechaFormateada = null;
            if (originalData.informacionGeneral.fechaSalida) {
                // Si la fecha tiene formato "DD/MM/YYYY HH:MM:SS", extraer solo la parte de la fecha
                fechaFormateada = originalData.informacionGeneral.fechaSalida.split(' ')[0];
            }
            
            // Crear la estructura base del nuevo JSON
            const transformedData = {
                "A": originalData.productos.length > 0 ? originalData.productos[0].op : null,
                "FECHA": fechaFormateada,
                "TALLER": originalData.informacionGeneral.bodegaSalida?.descripcion || null,
                "LINEA": null,
                "AUDITOR": originalData.informacionGeneral.auditoria?.nombre || null,
                "ESCANER": originalData.informacionGeneral.elaboradoPor || null,
                "LOTE": originalData.productos.length > 0 ? originalData.productos[0].op : null,
                "REFPROV": originalData.productos.length > 0 ? originalData.productos[0].referencia : null,
                "DESCRIPCIÓN": originalData.productos.length > 0 ? originalData.productos[0].articulo : null,
                "CANTIDAD": originalData.informacionGeneral.totalCantidad || 0, // Cambiado de null a 0 para evitar valor nulo
                "REFERENCIA": null,
                "TIPO": null,
                "PVP": null,
                "PRENDA": null,
                "GENERO": null,
                "PROVEEDOR": originalData.informacionGeneral.empresa || null,
                "ANEXOS": [],
                "HR": []
            };
            
            // Añadir los elementos al arreglo HR basados en los productos
            if (originalData.productos && originalData.productos.length > 0) {
                originalData.productos.forEach(producto => {
                    // Extraer el código del color (los dígitos al inicio del color)
                    let codigoColor = null;
                    let colorSinCodigo = producto.color || null;
                    
                    if (producto.color) {
                        // Usar una expresión regular para extraer los números al inicio
                        const match = producto.color.match(/^(\d+)\s+(.*)/);
                        if (match && match[1] && match[2]) {
                            codigoColor = match[1];
                            colorSinCodigo = match[2]; // Solo la parte textual del color
                        }
                    }
                    
                    transformedData.HR.push({
                        "codigo": codigoColor,
                        "color": colorSinCodigo,
                        "talla": producto.talla || null,
                        "cantidad": producto.cantidad || 0
                    });
                });
            }
            
            return transformedData;
        }

        // Variables para el JSON complementado
        let transformedDataWithExtras = null;
        let nextAnexoId = 1;

        document.addEventListener('DOMContentLoaded', function() {
            // Referencias a elementos del DOM
            const fileInput = document.getElementById('fileInput');
            const browseButton = document.getElementById('browseButton');
            const uploadContainer = document.getElementById('uploadContainer');
            const fileName = document.getElementById('fileName');
            const resultContainer = document.getElementById('resultContainer');
            const jsonOutput = document.getElementById('jsonOutput');
            const resumenTable = document.getElementById('resumenTable');
            const productosTable = document.getElementById('productosTable');
            const downloadJsonBtn = document.getElementById('downloadJson');
            const downloadTransformedJsonBtn = document.getElementById('downloadTransformedJson');
            const spinner = document.getElementById('spinner');
            const alertContainer = document.getElementById('alertContainer');
            const tabButtons = document.querySelectorAll('.tab-button');
            const tabContents = document.querySelectorAll('.tab-content');
            const anexosContainer = document.getElementById('anexosContainer');
            const addAnexoBtn = document.getElementById('addAnexoBtn');
            const anexoTemplate = document.getElementById('anexoTemplate');
            const copyRefprovBtn = document.getElementById('copyRefprov');
            
            // Variables globales
            let parsedData = null;
            
            // Evento para mostrar el diálogo de selección de archivo
            browseButton.addEventListener('click', function() {
                fileInput.click();
            });
            
            // Eventos para arrastrar y soltar archivos
            uploadContainer.addEventListener('dragover', function(e) {
                e.preventDefault();
                uploadContainer.classList.add('active');
            });
            
            uploadContainer.addEventListener('dragleave', function() {
                uploadContainer.classList.remove('active');
            });
            
            uploadContainer.addEventListener('drop', function(e) {
                e.preventDefault();
                uploadContainer.classList.remove('active');
                
                if (e.dataTransfer.files.length) {
                    handleFile(e.dataTransfer.files[0]);
                }
            });
            
            // Evento para selección de archivo mediante el input
            fileInput.addEventListener('change', function(e) {
                if (e.target.files.length) {
                    handleFile(e.target.files[0]);
                }
            });
            
            // Función para copiar REFPROV al portapapeles
            copyRefprovBtn.addEventListener('click', function() {
                const refprovInput = document.getElementById('refprov');
                navigator.clipboard.writeText(refprovInput.value).then(function() {
                    const tooltip = copyRefprovBtn.querySelector('.tooltip-text');
                    tooltip.textContent = '¡Copiado!';
                    setTimeout(function() {
                        tooltip.textContent = 'Copiar';
                    }, 1500);
                });
            });
            
            // Función para agregar un nuevo anexo
            addAnexoBtn.addEventListener('click', function() {
                addAnexo();
            });
            
            // Función para agregar un nuevo anexo
            function addAnexo() {
                const id = nextAnexoId++;
                
                // Clonar el template y reemplazar los marcadores de posición
                const template = anexoTemplate.innerHTML.replace(/{id}/g, id);
                
                // Crear un elemento div para el nuevo anexo
                const anexoDiv = document.createElement('div');
                anexoDiv.innerHTML = template;
                anexoDiv.classList.add('anexo-wrapper');
                anexoDiv.dataset.id = id;
                
                // Agregar el nuevo anexo al contenedor
                anexosContainer.appendChild(anexoDiv);
                
                // Establecer documento predeterminado para el nuevo anexo
                const documentoInput = anexoDiv.querySelector(`.anexo-documento`);
                if (parsedData && parsedData.productos && parsedData.productos.length > 0) {
                    documentoInput.value = parsedData.productos[0].op || '';
                }
                
                // Agregar evento para eliminar anexo
                const removeBtn = anexoDiv.querySelector('.btn-remove');
                removeBtn.addEventListener('click', function() {
                    anexosContainer.removeChild(anexoDiv);
                    updateJsonPreview();
                });
                
                // Actualizar el JSON cada vez que se añade un anexo
                updateJsonPreview();
            }
            
            // Manejar el archivo seleccionado
            function handleFile(file) {
                if (!file.name.endsWith('.xls') && !file.name.endsWith('.xlsx')) {
                    showAlert('Por favor selecciona un archivo Excel (.xls o .xlsx)', 'danger');
                    return;
                }
                
                fileName.textContent = `Archivo seleccionado: ${file.name}`;
                spinner.style.display = 'block';
                clearResults();
                
                // Procesar el archivo
                const reader = new FileReader();
                reader.onload = function(e) {
                    try {
                        const data = new Uint8Array(e.target.result);
                        processExcelFile(data);
                    } catch (error) {
                        spinner.style.display = 'none';
                        showAlert('Error al procesar el archivo: ' + error.message, 'danger');
                    }
                };
                reader.onerror = function() {
                    spinner.style.display = 'none';
                    showAlert('Error al leer el archivo', 'danger');
                };
                reader.readAsArrayBuffer(file);
            }
            
            // Procesar el archivo Excel
            function processExcelFile(data) {
                try {
                    // Leer el archivo con SheetJS
                    const workbook = XLSX.read(data, {
                        cellStyles: true,
                        cellFormulas: true,
                        cellDates: true,
                        cellNF: true,
                        sheetStubs: true
                    });
                    
                    // Obtener la primera hoja
                    const firstSheetName = workbook.SheetNames[0];
                    const worksheet = workbook.Sheets[firstSheetName];
                    
                    // Convertir a formato de filas para preservar estructura
                    const jsonData = XLSX.utils.sheet_to_json(worksheet, { header: 1, defval: null });
                    
                    // Extraer información según posiciones conocidas
                    parsedData = extractDataFromSheet(jsonData);
                    
                    // Mostrar resultados
                    displayResults(parsedData);
                    
                    spinner.style.display = 'none';
                    resultContainer.classList.remove('hidden');
                    showAlert('Archivo procesado correctamente', 'success');
                } catch (error) {
                    spinner.style.display = 'none';
                    showAlert('Error al procesar el archivo: ' + error.message, 'danger');
                    console.error(error);
                }
            }
            
            // Extraer datos del Excel según las posiciones conocidas
            function extractDataFromSheet(jsonData) {
                const data = {
                    informacionGeneral: {},
                    productos: []
                };
                
                // Información general (cabecera y datos principales)
                for (let i = 0; i < jsonData.length; i++) {
                    const row = jsonData[i];
                    if (!row) continue;
                    
                    // Número de traslado (4 columnas a la derecha)
                    if (row.includes("MOVIMIENTO DE TRASLADO No :")) {
                        const index = row.indexOf("MOVIMIENTO DE TRASLADO No :");
                        // Buscar 4 columnas a la derecha
                        for (let k = 1; k <= 6; k++) {
                            if (index + k < row.length && row[index + k] && row[index + k].toString().trim() !== "") {
                                data.informacionGeneral.numeroTraslado = row[index + k];
                                break;
                            }
                        }
                    }
                    
                    // Empresa
                    if (row[0] && typeof row[0] === 'string' && row[0].includes("TEXTILES")) {
                        data.informacionGeneral.empresa = row[0];
                    }
                    
                    // NIT
                    if (row.includes("Nit:")) {
                        const index = row.indexOf("Nit:");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.nit = row[index + 1];
                        }
                    }
                    
                    // Fecha impresión
                    if (row.includes("Impreso :")) {
                        const index = row.indexOf("Impreso :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.fechaImpresion = row[index + 1];
                        }
                    }
                    
                    // Página
                    if (row.includes("Pag")) {
                        const index = row.indexOf("Pag");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.pagina = row[index + 1];
                        }
                    }
                    
                    // Dirección (a veces mal escrito como "Dierccion")
                    if (row.includes("Dierccion :") || row.includes("Direccion :")) {
                        const index = row.includes("Dierccion :") ? 
                            row.indexOf("Dierccion :") : row.indexOf("Direccion :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.direccion = row[index + 1] || "";
                        }
                    }
                    
                    // Teléfono
                    if (row.includes("Telefono :")) {
                        const index = row.indexOf("Telefono :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.telefono = row[index + 1] || "";
                        }
                    }
                    
                    // Concepto (2 columnas a la derecha)
                    if (row.includes("Concepto :")) {
                        const index = row.indexOf("Concepto :");
                        // Buscar hasta 3 columnas a la derecha
                        for (let k = 1; k <= 3; k++) {
                            if (index + k < row.length && row[index + k] && row[index + k].toString().trim() !== "") {
                                data.informacionGeneral.concepto = row[index + k];
                                break;
                            }
                        }
                    }
                    
                    // Movimiento (2 columnas a la derecha)
                    if (row.includes("Movimiento :")) {
                        const index = row.indexOf("Movimiento :");
                        // Buscar hasta 3 columnas a la derecha
                        for (let k = 1; k <= 3; k++) {
                            if (index + k < row.length && row[index + k] && row[index + k].toString().trim() !== "") {
                                data.informacionGeneral.tipoMovimiento = row[index + k];
                                break;
                            }
                        }
                    }
                    
                    // Bodega salida
                    if (row.includes("Bodega") && row.includes("Salida :")) {
                        const index = row.indexOf("Salida :");
                        if (index + 2 < row.length) {
                            data.informacionGeneral.bodegaSalida = {
                                codigo: row[index + 1],
                                numero: row[index + 2],
                                descripcion: row[index + 3] || ""
                            };
                        }
                    }
                    
                    // Bodega entrada
                    if (row.includes("Bodega") && row.includes("Entrada :")) {
                        const index = row.indexOf("Entrada :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.bodegaEntrada = row[index + 1];
                        }
                    }
                    
                    // Fecha Salida (2 columnas a la derecha)
                    if (row.includes("Fecha Salida :")) {
                        const index = row.indexOf("Fecha Salida :");
                        // Buscar hasta 3 columnas a la derecha
                        for (let k = 1; k <= 3; k++) {
                            if (index + k < row.length && row[index + k] && row[index + k].toString().trim() !== "") {
                                data.informacionGeneral.fechaSalida = row[index + k];
                                break;
                            }
                        }
                    }
                    
                    //// Pieza
                    if (row.includes("Pieza :")) {
                        const index = row.indexOf("Pieza :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.pieza = row[index + 1] || "";
                        }
                    }
                    
                    // Pedido
                    if (row.includes("Pedido :")) {
                        const index = row.indexOf("Pedido :");
                        if (index + 1 < row.length) {
                            data.informacionGeneral.pedido = row[index + 1] || "";
                        }
                    }
                    
                    // Orden servicio y Auditoría - IMPORTANTE: Parte actualizada
                    if (row.includes("Orden Servicio :")) {
                        const osIndex = row.indexOf("Orden Servicio :");
                        
                        // Extraer valor de Orden Servicio
                        for (let k = 1; k <= 3; k++) {
                            if (osIndex + k < row.length && row[osIndex + k] && row[osIndex + k].toString().trim() !== "") {
                                data.informacionGeneral.ordenServicio = row[osIndex + k];
                                break;
                            }
                        }
                        
                        // En la misma fila buscamos los valores de auditoría
                        // Buscamos un código numérico seguido de un nombre
                        let foundAuditoria = false;
                        for (let j = 0; j < row.length - 1; j++) {
                            const currentVal = row[j];
                            const nextVal = row[j+1];
                            
                            // Verificamos que el valor actual sea numérico (código) y el siguiente contenga letras (nombre)
                            if (currentVal && 
                                /^\d+$/.test(currentVal.toString().trim()) && 
                                nextVal && 
                                /[A-Za-z]/.test(nextVal.toString())) {
                                
                                data.informacionGeneral.auditoria = {
                                    codigo: currentVal,
                                    nombre: nextVal
                                };
                                foundAuditoria = true;
                                break;
                            }
                        }
                    }
                    
                    // Consecutivo
                    if (row.includes("Consecutivo")) {
                        const consIndex = row.indexOf("Consecutivo");
                        // Valor 1 columna a la derecha
                        if (consIndex + 1 < row.length) {
                            data.informacionGeneral.consecutivo = row[consIndex + 1] || "";
                        }
                    }
                    
                    // Información del pie de página: Elaborado, Bultos, Despachado, Transportado, Recibido
                    if (row.includes("Elaboro")) {
                        const elaboroIndex = row.indexOf("Elaboro");
                        // Buscar en la siguiente fila para el valor
                        if (i + 1 < jsonData.length && jsonData[i + 1][elaboroIndex]) {
                            data.informacionGeneral.elaboradoPor = jsonData[i + 1][elaboroIndex];
                        }
                        
                        // No Bultos - Cajas
                        const bultosIndex = row.indexOf("No Bultos - Cajas");
                        if (bultosIndex !== -1 && i + 1 < jsonData.length) {
                            data.informacionGeneral.bultosCajas = jsonData[i + 1][bultosIndex] || "";
                        }
                        
                        // Despachado Por
                        const despachadoIndex = row.indexOf("Despachado Por :");
                        if (despachadoIndex !== -1 && i + 1 < jsonData.length) {
                            data.informacionGeneral.despachadoPor = jsonData[i + 1][despachadoIndex] || "";
                        }
                        
                        // Transportado Por
                        const transportadoIndex = row.indexOf("Transportado Por :");
                        if (transportadoIndex !== -1 && i + 1 < jsonData.length) {
                            data.informacionGeneral.transportadoPor = jsonData[i + 1][transportadoIndex] || "";
                        }
                        
                        // Recibido Por
                        const recibidoIndex = row.indexOf("Recibido Por :");
                        if (recibidoIndex !== -1 && i + 1 < jsonData.length) {
                            data.informacionGeneral.recibidoPor = jsonData[i + 1][recibidoIndex] || "";
                        }
                    }
                    
                    // Observación
                    if (row.includes("Observacion:")) {
                        const index = row.indexOf("Observacion:");
                        if (index + 1 < row.length) {
                            // Limpiar comillas y caracteres innecesarios de la observación
                            let observacion = row[index + 1];
                            if (observacion) {
                                observacion = observacion.replace(/^"|"$/g, '').trim();
                                data.informacionGeneral.observacion = observacion;
                            }
                        }
                    }
                    
                    // CORRECCIÓN: Buscar la línea que contiene el total de cantidades
                    if (row.length > 6 && !row[0] && !row[1] && row[6] && typeof row[6] === 'number' && row[8]) {
                        // Esta fila parece contener los totales
                        data.informacionGeneral.totalCantidad = row[6];
                        data.informacionGeneral.totalValor = row[8];
                    }
                    
                    // Buscar la línea de encabezado de productos
                    if (row[0] === "Referencia" && row.includes("Articulo") && row.includes("Talla")) {
                        // Encontramos el encabezado de la tabla de productos
                        let j = i + 1;
                        let inTotalesSection = false;
                        
                        // Recorrer las filas siguientes para capturar productos
                        while (j < jsonData.length && jsonData[j]) {
                            const productoRow = jsonData[j];
                            
                            // Detectar si ya llegamos a la sección de totales 
                            if (!inTotalesSection && 
                                (!productoRow[0] || productoRow[0] === null || productoRow[0] === "") && 
                                (!productoRow[1] || productoRow[1] === null || productoRow[1] === "") &&
                                productoRow[6] && 
                                productoRow[8]) {
                                inTotalesSection = true;
                                // CORRECCIÓN: Capturar los totales explícitamente
                                data.informacionGeneral.totalCantidad = productoRow[6];
                                data.informacionGeneral.totalValor = productoRow[8];
                                j++;
                                continue;
                            }
                            
                            // Si ya estamos en la sección de totales, salir del bucle
                            if (inTotalesSection) {
                                break;
                            }
                            
                            // Verificar si es una fila de producto válida
                            // Una fila de producto válida debe tener:
                            // 1. Un valor en la columna de referencia (índice 0)
                            // 2. Un valor en la columna de artículo (índice 1)
                            // 3. Datos en cantidad (índice 6) y/o valor unitario (índice 7)
                            if (productoRow[0] && productoRow[1] && (productoRow[6] || productoRow[7])) {
                                data.productos.push({
                                    referencia: productoRow[0],
                                    articulo: productoRow[1] || "",
                                    op: productoRow[3] || "",
                                    talla: productoRow[4] || "",
                                    color: productoRow[5] || "",
                                    cantidad: productoRow[6] || 0,
                                    valorUnitario: productoRow[7] || 0,
                                    subTotal: productoRow[9] || 0
                                });
                            } else if (!productoRow[0] && !productoRow[1] && !productoRow[3] && 
                                     !productoRow[4] && !productoRow[5] && !productoRow[6]) {
                                // Si llegamos a una fila completamente vacía, asumimos que es el fin de la tabla
                                break;
                            }
                            
                            j++;
                        }
                    }
                }
                
                return data;
            }
            
            // Mostrar los resultados en la interfaz
            function displayResults(data) {
                // Mostrar resumen en la tabla
                resumenTable.innerHTML = '';
                Object.entries(data.informacionGeneral).forEach(([key, value]) => {
                    if (typeof value === 'object' && value !== null) {
                        // Para objetos anidados como bodegaSalida o auditoria
                        const objValues = Object.values(value).filter(v => v).join(' - ');
                        addRowToTable(resumenTable, formatFieldName(key), objValues);
                    } else {
                        addRowToTable(resumenTable, formatFieldName(key), value);
                    }
                });
                
                // Mostrar productos en la tabla
                productosTable.innerHTML = '';
                data.productos.forEach(producto => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${producto.referencia || ''}</td>
                        <td>${producto.articulo || ''}</td>
                        <td>${producto.op || ''}</td>
                        <td>${producto.talla || ''}</td>
                        <td>${producto.color || ''}</td>
                        <td>${producto.cantidad || ''}</td>
                        <td>${producto.valorUnitario || ''}</td>
                        <td>${producto.subTotal || ''}</td>
                    `;
                    productosTable.appendChild(row);
                });
                
                // Mostrar JSON formateado
                jsonOutput.textContent = JSON.stringify(data, null, 2);
            }
            
            // Agregar fila a tabla
            function addRowToTable(tableBody, label, value) {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td><strong>${label}:</strong></td>
                    <td>${value !== null && value !== undefined ? value : ''}</td>
                `;
                tableBody.appendChild(row);
            }
            
            // Formatear el nombre del campo para mostrar
            function formatFieldName(fieldName) {
                const mapping = {
                    'numeroTraslado': 'Número de Traslado',
                    'empresa': 'Empresa',
                    'nit': 'NIT',
                    'fechaImpresion': 'Fecha de Impresión',
                    'pagina': 'Página',
                    'direccion': 'Dirección',
                    'telefono': 'Teléfono',
                    'concepto': 'Concepto',
                    'tipoMovimiento': 'Tipo de Movimiento',
                    'bodegaSalida': 'Bodega de Salida',
                    'bodegaEntrada': 'Bodega de Entrada',
                    'fechaSalida': 'Fecha de Salida',
                    'pieza': 'Pieza',
                    'pedido': 'Pedido',
                    'ordenServicio': 'Orden de Servicio',
                    'auditoria': 'Auditoría',
                    'consecutivo': 'Consecutivo',
                    'elaboradoPor': 'Elaborado Por',
                    'bultosCajas': 'Bultos/Cajas',
                    'despachadoPor': 'Despachado Por',
                    'transportadoPor': 'Transportado Por',
                    'recibidoPor': 'Recibido Por',
                    'observacion': 'Observación',
                    'totalCantidad': 'Total Cantidad',
                    'totalValor': 'Total Valor'
                };
                return mapping[fieldName] || fieldName;
            }
            
            // Cambiar entre pestañas
            tabButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const tabId = this.getAttribute('data-tab');
                    
                    // Desactivar todas las pestañas
                    tabButtons.forEach(btn => btn.classList.remove('active'));
                    tabContents.forEach(content => content.classList.remove('active'));
                    
                    // Activar la pestaña seleccionada
                    this.classList.add('active');
                    document.getElementById(tabId + 'Tab').classList.add('active');
                });
            });
            
            // Descargar JSON original
            downloadJsonBtn.addEventListener('click', function() {
                if (parsedData) {
                    const jsonString = JSON.stringify(parsedData, null, 2);
                    const blob = new Blob([jsonString], { type: 'application/json' });
                    saveAs(blob, 'datos_traslado.json');
                } else {
                    showAlert('No hay datos para descargar. Por favor, procesa un archivo primero.', 'danger');
                }
            });
            
            // Evento para descargar el JSON transformado
            downloadTransformedJsonBtn.addEventListener('click', function() {
                if (parsedData) {
                    const transformedData = createTransformedJSON(parsedData);
                    const jsonString = JSON.stringify(transformedData, null, 2);
                    const blob = new Blob([jsonString], { type: 'application/json' });
                    saveAs(blob, 'datos_traslado_transformados.json');
                } else {
                    showAlert('No hay datos para transformar. Por favor, procesa un archivo primero.', 'danger');
                }
            });
            
            // Función para crear JSON transformado mejorado con campos editables y múltiples anexos
// Función para crear JSON transformado mejorado con campos editables y múltiples anexos
function createTransformedJSONWithExtras(originalData, extraData = {}) {
    // Crear la estructura base usando el JSON transformado original
    const baseData = createTransformedJSON(originalData);
    
    // Generar la descripción concatenada (PRENDA + GENERO + REFPROV)
    const prenda = extraData.prenda || "";
    const genero = extraData.genero || "";
    const refprov = baseData.REFPROV || "";
    
    // Construir la descripción concatenada - solo si hay al menos un valor
    let descripcionConcatenada = null;
    if (prenda || genero || refprov) {
        descripcionConcatenada = [prenda, genero, refprov].filter(Boolean).join(" ");
    }
    
    // Recolectar todos los anexos
    const anexos = [];
    
    // Obtener todas las entradas de anexos
    const anexoItems = document.querySelectorAll('.anexo-wrapper');
    anexoItems.forEach(item => {
        const documento = item.querySelector('.anexo-documento').value;
        const tipo = item.querySelector('.anexo-tipo').value;
        const cantidad = item.querySelector('.anexo-cantidad').value;
        
        if (tipo) { // Solo añadir si tiene tipo seleccionado
            anexos.push({
                "DOCUMENTO": documento || baseData.A,
                "TIPO": tipo,
                "CANTIDAD": cantidad !== "" ? Number(cantidad) : 0
            });
        }
    });
    
    // Modificar el arreglo HR para que los valores sean directos sin nombres de propiedad
    const hrSimplificado = baseData.HR.map(item => [
        item.codigo || null,
        item.color || null,
        item.talla || null,
        item.cantidad || 0
    ]);
    
    // Actualizar los campos con los valores extra proporcionados
    const transformedData = {
        ...baseData,
        "LINEA": extraData.linea || baseData.LINEA,
        "REFERENCIA": extraData.referencia || baseData.REFERENCIA,
        "TIPO": extraData.tipo || baseData.TIPO,
        "PVP": extraData.pvp ? `$ ${extraData.pvp}.900` : baseData.PVP,
        "PRENDA": extraData.prenda || baseData.PRENDA,
        "GENERO": extraData.genero || baseData.GENERO,
        "PROVEEDOR": baseData.PROVEEDOR,
        // Actualizar DESCRIPCIÓN con la concatenación
        "DESCRIPCIÓN": descripcionConcatenada || baseData.DESCRIPCIÓN,
        // ANEXOS como arreglo capturado de los inputs
        "ANEXOS": anexos,
        // HR como arreglo de arreglos sin nombres de propiedad
        "HR": hrSimplificado
    };
    
    return transformedData;
}
            
            // Código para inicializar y manejar la pestaña de Complementar
            function initComplementarTab() {
                // Referencias a elementos del DOM
                const complementarForm = document.getElementById('complementarForm');
                const refprovInput = document.getElementById('refprov');
                const prendaInput = document.getElementById('prenda');
                const actualizarJsonBtn = document.getElementById('actualizarJson');
                const descargarComplementadoBtn = document.getElementById('descargarComplementado');
                const complementarOutput = document.getElementById('complementarOutput');
                
                // Limpiar los anexos existentes
                anexosContainer.innerHTML = '';
                nextAnexoId = 1;
                
                // Función para inicializar el formulario con los datos disponibles
                function initFormWithData() {
                    if (!parsedData || !parsedData.productos || parsedData.productos.length === 0) {
                        showAlert('No hay datos para complementar. Por favor, procesa un archivo primero.', 'danger');
                        return false;
                    }
                    
                    // Establecer REFPROV (no editable)
                    refprovInput.value = parsedData.productos[0].referencia || '';
                    
                    // Establecer PRENDA con la primera palabra de DESCRIPCIÓN
                    const descripcion = parsedData.productos[0].articulo || '';
                    const primeraPalabra = descripcion.split(' ')[0] || '';
                    prendaInput.value = primeraPalabra;
                    
                    // Añadir un anexo por defecto
                    addAnexo();
                    
                    // Mostrar el JSON inicial en la vista previa
                    updateJsonPreview();
                    
                    return true;
                }
                
                // Función para obtener los valores del formulario
                function getFormValues() {
                    return {
                        linea: document.getElementById('linea').value,
                        referencia: document.getElementById('referencia').value,
                        tipo: document.getElementById('tipo').value,
                        pvp: document.getElementById('pvp').value,
                        prenda: document.getElementById('prenda').value,
                        genero: document.getElementById('genero').value
                    };
                }
                
                // Función para actualizar la vista previa del JSON
                function updateJsonPreview() {
                    if (!parsedData) return;
                    
                    const formValues = getFormValues();
                    transformedDataWithExtras = createTransformedJSONWithExtras(parsedData, formValues);
                    complementarOutput.textContent = JSON.stringify(transformedDataWithExtras, null, 2);
                }
                
                // Evento para actualizar el JSON
                actualizarJsonBtn.addEventListener('click', function() {
                    if (!parsedData) {
                        showAlert('No hay datos para complementar. Por favor, procesa un archivo primero.', 'danger');
                        return;
                    }
                    
                    updateJsonPreview();
                    showAlert('JSON actualizado correctamente', 'success');
                });
                
                // Evento para descargar el JSON complementado
                descargarComplementadoBtn.addEventListener('click', function() {
                    if (!transformedDataWithExtras) {
                        showAlert('Primero debe actualizar el JSON', 'danger');
                        return;
                    }
                    
                    const jsonString = JSON.stringify(transformedDataWithExtras, null, 2);
                    const blob = new Blob([jsonString], { type: 'application/json' });
                    saveAs(blob, 'datos_traslado_complementados.json');
                });
                
                // Eventos para actualizar el JSON al cambiar cualquier campo
                document.querySelectorAll('#complementarForm input, #complementarForm select').forEach(input => {
                    input.addEventListener('change', updateJsonPreview);
                });
                
                // Inicializar el formulario con los datos disponibles
                return initFormWithData();
            }
            
            // Detectar cuando se selecciona la pestaña de Complementar
            tabButtons.forEach(button => {
                if(button.getAttribute('data-tab') === 'complementar') {
                    button.addEventListener('click', function() {
                        // Inicializar la pestaña de Complementar cuando se seleccione
                        const success = initComplementarTab();
                        
                        // Si no hay datos o no se pudo inicializar, volver a la pestaña de resumen
                        if (!success) {
                            setTimeout(() => {
                                document.querySelector('.tab-button[data-tab="resumen"]').click();
                            }, 500);
                        }
                    });
                }
            });
            
            // Mostrar alerta
            function showAlert(message, type) {
                const alert = document.createElement('div');
                alert.className = `alert alert-${type}`;
                alert.textContent = message;
                
                alertContainer.innerHTML = '';
                alertContainer.appendChild(alert);
                
                // Auto-eliminar después de 5 segundos
                setTimeout(() => {
                    alert.remove();
                }, 5000);
            }
            
            // Limpiar resultados
            function clearResults() {
                jsonOutput.textContent = '';
                resumenTable.innerHTML = '';
                productosTable.innerHTML = '';
                parsedData = null;
                resultContainer.classList.add('hidden');
                alertContainer.innerHTML = '';
            }
        });
    </script>
</body>
</html>
