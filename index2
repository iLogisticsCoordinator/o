<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
  <meta name="theme-color" content="#000000">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <link rel="icon" sizes="192x192" href="https://i.ibb.co/LC188Vm/Remove-bg-ai-1712427251285.png">
  <link rel="apple-touch-icon" href="https://i.ibb.co/LC188Vm/Remove-bg-ai-1712427251285.png">
  <meta charset="utf-8">
  <link rel="icon" href="https://i.ibb.co/LC188Vm/Remove-bg-ai-1712427251285.png">
  <title>Lector PDA - Visualización Avanzada</title>
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="mobile-web-app-capable" content="yes">

  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

  <script>
    // ============================================================
    // CONFIGURACIÓN IMPORTANTE - ACTUALIZAR CON TU URL DE GAS
    // ============================================================
    // Reemplaza esta URL con la URL de tu implementación de Google Apps Script
    const API_URL = 'https://script.google.com/macros/s/AKfycbyQ6VujcdbvynyKkQuxDU-VEOwPAMPgdjFMLGzp5yrDhAbMmaTFK-l4Oi-2QRoaeSxX/exec';
    // ============================================================
    
    // Service Worker para PWA
    if ('serviceWorker' in navigator) {
      navigator.serviceWorker.register('sw.js')
        .then(() => console.log('Service Worker registrado'))
        .catch(err => console.error('SW error', err));
    }
  </script>

  <style>
    :root {
      --primary: #4361ee;
      --primary-dark: #3a56d4;
      --primary-light: #eef2ff;
      --secondary: #3f37c9;
      --success: #4cc9f0;
      --success-dark: #3ab7dc;
      --danger: #f72585;
      --danger-dark: #e51775;
      --warning: #f8961e;
      --warning-dark: #e6870d;
      --light: #f8f9fa;
      --dark: #212529;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --bg-color: #f5f7fa;
      --card-bg: #ffffff;
      --border-color: #e0e0e0;
      --border-radius: 8px;
      --box-shadow: 0 4px 12px rgba(0,0,0,0.08);
      --transition: all 0.3s ease;
    }
    
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }
    
    body {
      font-family: 'Roboto', sans-serif;
      margin: 0;
      padding: 0;
      background: var(--bg-color);
      color: var(--dark);
      touch-action: manipulation;
      -webkit-touch-callout: none;
      -webkit-user-select: none;
      user-select: none;
      line-height: 1.5;
      font-size: 15px;
    }
    
    #scanner {
      display: flex;
      flex-direction: column;
      height: 100vh;
      max-width: 800px;
      margin: 0 auto;
      box-shadow: 0 0 20px rgba(0,0,0,0.1);
      background: var(--card-bg);
      position: relative;
    }
    
    #barcode {
      width: auto;
      padding: 18px 15px;
      font-size: 18px;
      text-align: center;
      background: var(--card-bg);
      color: var(--dark);
      border: none;
      border-bottom: 2px solid var(--primary);
      font-weight: 500;
      transition: var(--transition);
    }
    
    #barcode:focus {
      outline: none;
      box-shadow: 0 2px 5px rgba(67, 97, 238, 0.2);
    }
    
    #barcode::placeholder {
      color: var(--gray);
      opacity: 0.7;
    }
    
    #status {
      padding: 12px 10px;
      text-align: center;
      background: var(--primary);
      color: white;
      font-size: 12px;
      font-weight: 500;
      letter-spacing: 0.5px;
    }
    
    #results {
      flex: 1;
      overflow-y: auto;
      padding: 15px;
      background: var(--bg-color);
    }
    
    .result-item {
      margin-bottom: 20px;
      padding: 18px;
      background: var(--card-bg);
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      border-left: 4px solid var(--primary);
    }
    
    .result-row {
      display: flex;
      margin-bottom: 10px;
      padding-bottom: 10px;
      border-bottom: 1px solid var(--border-color);
      align-items: flex-start;
    }
    
    .result-row:last-child {
      border-bottom: none;
      margin-bottom: 0;
      padding-bottom: 0;
    }
    
    .col-header {
      min-width: 140px;
      font-weight: 500;
      color: var(--primary-dark);
      font-size: 15px;
    }
    
    .error {
      color: var(--danger);
      text-align: center;
      padding: 20px;
      background: var(--card-bg);
      border-radius: var(--border-radius);
      margin: 15px;
      box-shadow: var(--box-shadow);
      font-weight: 500;
    }
    
    .data-stats {
      text-align: center;
      padding: 12px 10px;
      color: var(--gray);
      font-size: 14px;
      background: var(--card-bg);
      border-bottom: 1px solid var(--border-color);
    }
    
    .loading {
      color: var(--primary);
      text-align: center;
      padding: 30px 15px;
      font-size: 16px;
    }
    
    .offline-banner {
      background: var(--warning);
      color: var(--dark);
      text-align: center;
      padding: 8px;
      font-size: 13px;
      font-weight: 500;
    }
    
    .siesa-item {
      margin-top: 15px;
      padding: 15px;
      background: rgba(67, 97, 238, 0.05);
      border-radius: var(--border-radius);
      border-left: 3px solid var(--success);
    }
    
    .siesa-header {
      font-weight: 600;
      color: var(--secondary);
      margin-bottom: 12px;
      padding-bottom: 8px;
      border-bottom: 1px solid rgba(0,0,0,0.1);
      font-size: 16px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .json-value {
      word-break: break-word;
      flex: 1;
      font-size: 15px;
    }
    
    .no-data {
      color: var(--gray);
      font-style: italic;
    }
    
    .badge {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 20px;
      font-size: 12px;
      font-weight: 600;
      margin-left: 8px;
    }
    
    .badge-success {
      background: rgba(76, 201, 240, 0.2);
      color: var(--success-dark);
    }
    
    .badge-warning {
      background: rgba(248, 150, 30, 0.2);
      color: var(--warning-dark);
    }
    
    .numeric-value {
      font-family: 'Roboto Mono', monospace;
      font-weight: 500;
    }
    
    .timestamp {
      font-size: 12px;
      color: var(--gray);
      margin-top: 5px;
    }
    
    /* Botones */
    .btn {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 10px 18px;
      border-radius: var(--border-radius);
      font-weight: 500;
      font-size: 14px;
      cursor: pointer;
      transition: var(--transition);
      border: none;
      gap: 8px;
    }
    
    .btn-primary {
      background-color: var(--primary);
      color: white;
    }
    
    .btn-primary:hover {
      background-color: var(--primary-dark);
    }
    
    .btn-success {
      background-color: var(--success);
      color: white;
    }
    
    .btn-success:hover {
      background-color: var(--success-dark);
    }
    
    .btn-danger {
      background-color: var(--danger);
      color: white;
    }
    
    .btn-danger:hover {
      background-color: var(--danger-dark);
    }
    
    .btn-warning {
      background-color: var(--warning);
      color: white;
    }
    
    .btn-warning:hover {
      background-color: var(--warning-dark);
    }
    
    .btn-sm {
      padding: 8px 14px;
      font-size: 13px;
    }
    
    .btn-block {
      display: flex;
      width: 100%;
    }
    
    /* Botón de entregas */
    .delivery-btn {
      background-color: var(--success);
      color: white;
      border: none;
      padding: 12px 20px;
      border-radius: var(--border-radius);
      font-weight: 500;
      cursor: pointer;
      transition: var(--transition);
      display: inline-flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
      margin-top: 10px;
    }
    
    .delivery-btn:hover {
      background-color: var(--success-dark);
    }
    
    .delivery-btn i {
      font-size: 16px;
    }
    
    .save-success {
      color: var(--success-dark);
      font-weight: 500;
      font-size: 14px;
      display: none;
      align-items: center;
      gap: 5px;
    }
    
    .save-success i {
      font-size: 14px;
    }
    
    /* Action buttons container */
    .action-buttons {
      display: flex;
      flex-direction: column;
      gap: 8px;
      margin-top: 15px;
    }
    
    /* Responsive */
    @media (max-width: 600px) {
      .result-row {
        flex-direction: column;
        gap: 5px;
      }
      
      .col-header {
        margin-bottom: 5px;
        min-width: auto;
      }
      
      #barcode {
        font-size: 16px;
        padding: 15px 10px;
      }
      
      .siesa-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
      }
      
      .badge {
        margin-left: 0;
      }
    }

    /* Contenedor del input con ícono */
    .barcode-input-container {
      position: relative;
      max-width: 400px;
      margin: 20px auto;
    }
    
    /* Estilo del input */
    #barcode {
      width: 100%;
      padding: 15px 15px 15px 45px;
      font-size: 16px;
      border: 2px solid #ccc;
      border-radius: 12px;
      outline: none;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    
    /* Efecto al enfocar */
    #barcode:focus {
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.2);
    }
    
    /* Ícono dentro del input */
    .barcode-input-container i {
      position: absolute;
      left: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #888;
      font-size: 18px;
      pointer-events: none;
    }

    /* Modal de cámara */
    .camera-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.95);
      z-index: 10000;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      -webkit-user-select: none;
      user-select: none;
      touch-action: manipulation;
    }
    
    .camera-view {
      width: 90%;
      max-width: 500px;
      background: #000;
      margin-bottom: 20px;
      height: auto;
      border-radius: var(--border-radius);
      overflow: hidden;
    }
    
    .camera-actions {
      display: flex;
      gap: 12px;
      margin-top: 15px;
    }
    
    #photoPreview {
      display: none;
      max-width: 90%;
      max-height: 60vh;
      margin-bottom: 20px;
      object-fit: contain;
      border-radius: var(--border-radius);
      box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    }
    
    .uploading-status {
      color: white;
      margin-top: 15px;
      display: none;
      font-size: 16px;
      font-weight: 500;
      text-align: center;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 8px;
    }
    
    /* Estilos para las partes extraídas del QR */
    .qr-info {
      margin-bottom: 15px;
      padding: 12px;
      background: var(--primary-light);
      border-radius: var(--border-radius);
      border-left: 3px solid var(--primary);
    }
    
    .qr-info-row {
      display: flex;
      gap: 10px;
      margin-bottom: 5px;
    }
    
    .qr-info-label {
      font-weight: 500;
      color: var(--primary-dark);
    }
    
    .qr-info-value {
      font-weight: 400;
    }
    
    /* Para evitar que el teclado aparezca en la pantalla de cámara */
    .camera-modal * {
      -webkit-user-select: none;
      user-select: none;
    }
    
    /* Evitar que aparezca el resaltado de selección */
    .camera-modal button {
      -webkit-tap-highlight-color: transparent;
    }
  </style>
</head>
<body>
  <div id="scanner">
    <div id="offline-banner" class="offline-banner" style="display: none;">
      <i class="fas fa-wifi-slash"></i> Modo Offline - Datos Cacheados
    </div>

    <div class="barcode-input-container">
      <i class="fa-solid fa-qrcode"></i>
      <input type="text" id="barcode" autofocus placeholder="Escanea el código QR del documento (DOC-NIT)">
    </div>

    <div id="status">Iniciando Sistema...</div>
    <div class="data-stats" id="data-stats">Cargando datos...</div>
    <div id="results"></div>
  </div>

  <div id="cameraModal" class="camera-modal">
    <video id="cameraFeed" class="camera-view" autoplay playsinline></video>
    <img id="photoPreview" alt="Vista previa de la foto">
    <div class="camera-actions">
      <button id="takePhotoBtn" class="btn btn-primary">
        <i class="fas fa-camera"></i> Tomar Foto
      </button>
      <button id="cancelCaptureBtn" class="btn btn-danger">
        <i class="fas fa-times"></i> Cancelar
      </button>
    </div>
    <div id="uploadStatus" class="uploading-status">
      <i class="fas fa-spinner fa-pulse"></i> Subiendo foto...
    </div>
    <!-- Input oculto para evitar que el teclado aparezca en dispositivos móviles -->
    <input type="text" id="dummyInput" style="position: absolute; opacity: 0; height: 0; width: 0;" readonly />
  </div>

  <script>
    // Variables globales
    let cameraStream = null;
    let currentDocumentData = null;
    let photoBlob = null;
    let preventKeyboardTimer = null;
    let qrParts = null; // Variable global para almacenar el NIT para referencia posterior

    // Función para abrir la cámara
    function abrirCamara(factura) {
      // Guardar datos para uso posterior
      currentDocumentData = {
        factura: factura,
        btnElement: document.querySelector(`.delivery-btn[data-factura="${factura}"]`)
      };
      
      // Mostrar la cámara
      mostrarCamara();
    }

    // Función para mostrar la cámara
    function mostrarCamara() {
      const cameraModal = document.getElementById('cameraModal');
      const cameraFeed = document.getElementById('cameraFeed');
      const photoPreview = document.getElementById('photoPreview');
      const takePhotoBtn = document.getElementById('takePhotoBtn');
      const barcodeInput = document.getElementById('barcode');
      const dummyInput = document.getElementById('dummyInput');
      
      // Ocultar teclado al abrir la cámara
      barcodeInput.blur();
      document.activeElement.blur();
      
      // Forzar que no se muestre el teclado
      if (dummyInput) {
        dummyInput.readOnly = true; 
        dummyInput.setAttribute('inputmode', 'none');
      }
      
      // Prevenir que cualquier elemento obtenga el foco mientras la cámara está abierta
      preventKeyboardTimer = setInterval(() => {
        if (document.activeElement && document.activeElement.tagName === 'INPUT' && document.activeElement.id !== 'dummyInput') {
          document.activeElement.blur();
        }
      }, 100);
      
      // Mostrar modal y ocultar vista previa
      cameraModal.style.display = 'flex';
      photoPreview.style.display = 'none';
      cameraFeed.style.display = 'block';
      
      // Configurar cámara - usar cámara trasera por defecto
      navigator.mediaDevices.getUserMedia({ 
        video: { 
          facingMode: 'environment',
          width: { ideal: 1280 },
          height: { ideal: 720 }
        } 
      })
        .then(stream => {
          cameraStream = stream;
          cameraFeed.srcObject = stream;
        })
        .catch(error => {
          console.error("Error al acceder a la cámara:", error);
          alert("No se pudo acceder a la cámara. Por favor permite el acceso.");
          cerrarCamara();
        });
      
      // Configurar botones
      takePhotoBtn.innerHTML = '<i class="fas fa-camera"></i> Tomar Foto';
      takePhotoBtn.disabled = false;
      takePhotoBtn.onclick = capturarFoto;
      document.getElementById('uploadStatus').style.display = 'none';
      
      // Agregar listener para prevenir el comportamiento predeterminado de los clics
      cameraModal.addEventListener('touchstart', preventDefaultBehavior, { passive: false });
      cameraModal.addEventListener('touchmove', preventDefaultBehavior, { passive: false });
    }
    
    // Prevenir comportamiento predeterminado para evitar enfoque de teclado
    function preventDefaultBehavior(e) {
      if (e.target.tagName !== 'BUTTON') {
        e.preventDefault();
      }
    }

    // Función para capturar foto
    function capturarFoto() {
      const cameraFeed = document.getElementById('cameraFeed');
      const photoPreview = document.getElementById('photoPreview');
      const takePhotoBtn = document.getElementById('takePhotoBtn');
      
      // Crear canvas temporal
      const canvas = document.createElement('canvas');
      canvas.width = cameraFeed.videoWidth;
      canvas.height = cameraFeed.videoHeight;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(cameraFeed, 0, 0, canvas.width, canvas.height);
      
      // Obtener blob de la imagen
      canvas.toBlob(blob => {
        photoBlob = blob;
        
        // Mostrar vista previa
        photoPreview.src = URL.createObjectURL(blob);
        photoPreview.style.display = 'block';
        cameraFeed.style.display = 'none';
        
        // Cambiar botón para subir foto
        takePhotoBtn.innerHTML = '<i class="fas fa-cloud-upload-alt"></i> Subir Foto';
        takePhotoBtn.onclick = subirFoto;
      }, 'image/jpeg', 0.85);
    }

    // Función para subir foto
    async function subirFoto() {
      if (!currentDocumentData || !photoBlob) {
        console.error("No hay datos disponibles para subir");
        return;
      }
      
      const { factura, btnElement } = currentDocumentData;
      const takePhotoBtn = document.getElementById('takePhotoBtn');
      const uploadStatus = document.getElementById('uploadStatus');
      
      takePhotoBtn.disabled = true;
      takePhotoBtn.innerHTML = '<i class="fas fa-spinner fa-pulse"></i> Subiendo...';
      uploadStatus.style.display = 'flex';
      uploadStatus.innerHTML = '<i class="fas fa-spinner fa-pulse"></i> Subiendo foto...';
      
      try {
        // Convertir blob a base64
        const reader = new FileReader();
        reader.readAsDataURL(photoBlob);
        
        reader.onloadend = async () => {
          const base64Data = reader.result.split(',')[1];
          const nombreArchivo = factura.replace(/[^a-zA-Z0-9\-]/g, '') + '.jpg';
          
          // Adaptar para usar fetch en lugar de google.script.run
          try {
            const response = await fetch(`${API_URL}?action=guardarFoto`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                base64Data,
                nombreArchivo,
                factura
              })
            });
            
            const result = await response.json();
            
            if (result.success) {
              uploadStatus.innerHTML = '<i class="fas fa-check-circle"></i> Foto subida correctamente';
              takePhotoBtn.innerHTML = '<i class="fas fa-check"></i> Foto subida';
              
              // Marcar como completado en el botón de entregas
              if (btnElement) {
                btnElement.innerHTML = '<i class="fas fa-check-circle"></i> Entregado con foto';
                btnElement.style.backgroundColor = '#28a745';
              }
              
              setTimeout(cerrarCamara, 1500);
            } else {
              throw new Error(result.error || "Error al subir la foto");
            }
          } catch (error) {
            console.error("Error al subir foto:", error);
            uploadStatus.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error al subir foto';
            takePhotoBtn.disabled = false;
          }
        };
        
      } catch (error) {
        console.error("Error al procesar foto:", error);
        uploadStatus.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error al procesar foto';
        takePhotoBtn.disabled = false;
      }
    }

    // Función para cerrar la cámara
    function cerrarCamara() {
      if (cameraStream) {
        cameraStream.getTracks().forEach(track => track.stop());
        cameraStream = null;
      }
      
      const cameraModal = document.getElementById('cameraModal');
      
      // Eliminar los listeners para prevenir comportamiento predeterminado
      cameraModal.removeEventListener('touchstart', preventDefaultBehavior);
      cameraModal.removeEventListener('touchmove', preventDefaultBehavior);
      
      // Limpiar el timer de prevención de teclado
      if (preventKeyboardTimer) {
        clearInterval(preventKeyboardTimer);
        preventKeyboardTimer = null;
      }
      
      cameraModal.style.display = 'none';
      photoBlob = null;
      
      // Restauramos el foco normal después de cerrar la cámara
      setTimeout(() => {
        const barcodeInput = document.getElementById('barcode');
        barcodeInput.focus();
      }, 300);
    }

    // Configurar botón cancelar
    document.getElementById('cancelCaptureBtn').addEventListener('click', cerrarCamara);

    // Función para procesar entregas (adaptada para usar fetch)
    async function procesarEntrega(documento, lote, referencia, cantidad, factura, nit, btnElement) {
      // Guardamos el registro incluyendo el NIT
      await guardarRegistroSiesa(documento, lote, referencia, cantidad, factura, nit, btnElement);
      
      // Luego abrimos la cámara automáticamente
      setTimeout(() => {
        abrirCamara(factura);
      }, 500);
    }

    // Función para guardar registros (adaptada para usar fetch)
    async function guardarRegistroSiesa(documento, lote, referencia, cantidad, factura, nit, btnElement) {
      const successElement = btnElement.nextElementSibling;
      btnElement.disabled = true;
      btnElement.innerHTML = '<i class="fas fa-spinner fa-pulse"></i> Guardando...';

      // Crear objeto estructurado con todos los datos
      const datosParaGuardar = {
        documento: documento,
        lote: lote || '',
        referencia: referencia || '',
        cantidad: cantidad,
        factura: factura,
        nit: nit || '' 
      };

      console.log("Datos a enviar:", datosParaGuardar);

      try {
        const response = await fetch(`${API_URL}?action=guardarSoporte`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(datosParaGuardar)
        });
        
        const result = await response.json();
        
        if (result.success) {
          btnElement.innerHTML = '<i class="fas fa-check"></i> Registro guardado';
          btnElement.style.backgroundColor = '#28a745';
          successElement.style.display = 'flex';
        } else {
          throw new Error(result.error || "Error al guardar el registro");
        }
      } catch (error) {
        console.error("Error al guardar:", error);
        btnElement.disabled = false;
        btnElement.innerHTML = '<i class="fas fa-exclamation-circle"></i> Error, intentar nuevamente';
        btnElement.style.backgroundColor = '';
      }
    }

    // Configuración
    const CONFIG = {
      VERSION: "4.0.0",
      CACHE_TTL: 24 * 60 * 60 * 1000 // 24 horas en milisegundos
    };

    // Variables globales
    let database = [];
    const barcodeInput = document.getElementById('barcode');
    const statusDiv = document.getElementById('status');
    const resultsDiv = document.getElementById('results');
    const dataStats = document.getElementById('data-stats');
    const offlineBanner = document.getElementById('offline-banner');

    // Función para sonido de éxito
    function playSuccessSound() {
      try {
        const ctx = new (window.AudioContext || window.webkitAudioContext)(); 
        const osc = ctx.createOscillator(); 
        const gainNode = ctx.createGain(); 
        osc.type = "sawtooth"; 
        osc.frequency.setValueAtTime(300, ctx.currentTime); 
        osc.frequency.exponentialRampToValueAtTime(80, ctx.currentTime + 0.5); 
        gainNode.gain.value = 0.8; 
        gainNode.gain.exponentialRampToValueAtTime(0.01, ctx.currentTime + 0.5); 
        osc.connect(gainNode); 
        gainNode.connect(ctx.destination); 
        osc.start(); 
        osc.stop(ctx.currentTime + 0.5);
      } catch (e) {
        console.log("Error al reproducir sonido de error:", e);
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      // Cargar datos desde el servidor
      loadDataFromServer();
      
      setupEventListeners();
      
      // Agregar eventos para prevenir el teclado virtual en la cámara
      document.addEventListener('focusin', function(e) {
        if (document.getElementById('cameraModal').style.display === 'flex' && 
            e.target.id !== 'dummyInput') {
          e.preventDefault();
          e.target.blur();
        }
      });
      
      // Manejar el cambio de orientación en dispositivos móviles
      window.addEventListener('orientationchange', function() {
        if (document.getElementById('cameraModal').style.display === 'flex') {
          setTimeout(() => {
            document.activeElement.blur();
          }, 300);
        }
      });
    });

    async function loadDataFromServer() {
      statusDiv.innerHTML = '<i class="fas fa-sync fa-spin"></i> Cargando Datos...';
      dataStats.innerHTML = '<i class="fas fa-server"></i> Conectando con el servidor...';
      
      try {
        const response = await fetch(`${API_URL}?action=obtenerDatos`);
        const serverData = await response.json();
        handleDataLoadSuccess(serverData);
      } catch (error) {
        handleDataLoadError(error);
      }
    }

    function handleDataLoadSuccess(serverData) {
      if (serverData && serverData.success && serverData.data) {
        database = serverData.data;
        cacheData(database);
        
        statusDiv.innerHTML = '<i class="fas fa-check"></i> Sistema Listo';
        dataStats.innerHTML = `<i class="fas fa-database"></i> ${database.length} registros | ${new Date().toLocaleTimeString()}`;
        resultsDiv.innerHTML = `
          <div class="result-item" style="text-align: center; color: var(--gray);">
            <i class="fas fa-qrcode" style="font-size: 2rem; margin-bottom: 0.5rem;"></i>  
            <p style="margin: 0;">Escanea un código QR para consultar información</p>
            <p style="margin-top: 8px; font-size: 13px; opacity: 0.8;">Formato: DOCUMENTO-NIT (Ejemplo: REC58101-805027653)</p>
          </div>
        `;
        
        playSuccessSound();
      } else {
        handleDataLoadError(new Error('Formato de datos incorrecto'));
      }
    }

    function handleDataLoadError(error) {
      console.error("Error al cargar datos:", error);
      
      // Verificar si hay datos en caché
      const cachedData = getCachedData();
      if (cachedData) {
        database = cachedData.data;
        statusDiv.textContent = "SISTEMA LISTO (DATOS CACHEADOS)";
        dataStats.textContent = `${database.length} registros | Última actualización: ${new Date(cachedData.timestamp).toLocaleString()}`;
        resultsDiv.innerHTML = `
          <div class="result-item" style="text-align: center; color: var(--gray);">
            <i class="fas fa-qrcode" style="font-size: 2rem; margin-bottom: 0.5rem;"></i>  
            <p style="margin: 0;">Escanea un código QR para consultar información</p>
            <p style="margin-top: 8px; font-size: 13px; opacity: 0.8;">Formato: DOCUMENTO-NIT (Ejemplo: REC58101-805027653)</p>
          </div>
        `;
        offlineBanner.style.display = 'block';
      } else {
        statusDiv.innerHTML = '<span style="color: var(--danger)">ERROR AL CARGAR DATOS</span>';
        dataStats.textContent = error.message || 'Error desconocido';
        resultsDiv.innerHTML = `<div class="error"><i class="fas fa-exclamation-circle"></i> No se pudo cargar la base de datos: ${error.message || 'Error desconocido'}</div>`;
        playErrorSound();
      }
    }

    function getCachedData() {
      const cache = localStorage.getItem('pdaScannerCache');
      if (!cache) return null;
      
      try {
        const parsed = JSON.parse(cache);
        if (Date.now() - parsed.timestamp > CONFIG.CACHE_TTL) return null;
        return parsed;
      } catch (e) {
        console.error("Error al parsear cache:", e);
        return null;
      }
    }

    function cacheData(data) {
      const cache = {
        data: data,
        timestamp: Date.now(),
        version: CONFIG.VERSION
      };
      
      try {
        localStorage.setItem('pdaScannerCache', JSON.stringify(cache));
      } catch (e) {
        console.error("Error al guardar en cache:", e);
        if (e.name === 'QuotaExceededError') {
          clearOldCache();
          cacheData(data);
        }
      }
    }

    function clearOldCache() {
      const keys = Object.keys(localStorage);
      for (const key of keys) {
        if (key.startsWith('pdaScannerCache')) {
          localStorage.removeItem(key);
        }
      }
    }

    function setupEventListeners() {
      // Foco persistente excepto cuando la cámara está abierta
      function enforceFocus() {
        // Solo aplicar foco si la cámara no está abierta
        if (document.activeElement !== barcodeInput && 
            document.getElementById('cameraModal').style.display !== 'flex') {
          barcodeInput.focus();
        }
        setTimeout(enforceFocus, 100);
      }
      enforceFocus();
      
      // Detector para deshabilitar el teclado virtual en dispositivos móviles
      document.addEventListener('touchstart', function(e) {
        if (document.getElementById('cameraModal').style.display === 'flex' && 
            e.target.tagName !== 'BUTTON') {
          e.preventDefault();
          if (document.activeElement) {
            document.activeElement.blur();
          }
        }
      }, { passive: false });
      
      // Detectar escaneo
      barcodeInput.addEventListener('input', function() {
        const code = this.value.trim();
        if (code.length < 5) return; // Un código válido debe tener al menos 5 caracteres
        
        // Analizar el formato del código: DOCUMENTO-NIT
        const parts = parseQRCode(code);
        
        if (parts) {
          qrParts = parts; // Guardar en variable global para uso posterior
          const startTime = Date.now();
          processQRCodeParts(parts);
          const searchTime = Date.now() - startTime;
          
          statusDiv.textContent = `REGISTRO PROCESADO (${searchTime}ms)`;
        } else {
          showError(code, "Formato de código QR no válido. Use formato: DOCUMENTO-NIT");
          playErrorSound();
          statusDiv.textContent = `FORMATO INVÁLIDO`;
        }
        
        setTimeout(() => {
          this.value = '';
          this.focus();
        }, 50);
      });
    }
    
    // Función para analizar el código QR
    function parseQRCode(code) {
      // Buscamos un formato como "REC58101-805027653"
      const regex = /^([A-Za-z0-9-]+)-([0-9]+)$/;
      const match = code.match(regex);
      
      if (match) {
        return {
          documento: match[1],
          nit: match[2]
        };
      }
      
      return null;
    }
    
    // Procesa las partes del código QR y muestra los resultados
    function processQRCodeParts(parts) {
      const { documento, nit } = parts;
      
      // Buscar un registro que coincida con el documento
      const result = database.find(item => 
        item.documento && item.documento.toString() === documento
      );
      
      if (result) {
        // Filtramos los datosSiesa para mostrar solo los que coinciden con el NIT
        const filteredItem = JSON.parse(JSON.stringify(result));
        
        if (filteredItem.datosSiesa && Array.isArray(filteredItem.datosSiesa)) {
          // Filtramos por NIT en lugar de por cliente
          filteredItem.datosSiesa = filteredItem.datosSiesa.filter(siesa => {
            // Extraemos solo dígitos del NIT para comparar (por si acaso viene con formato)
            const siesaNitDigits = siesa.nit ? siesa.nit.toString().replace(/\D/g, '') : '';
            const scanNitDigits = nit.replace(/\D/g, '');
            
            return siesaNitDigits.includes(scanNitDigits) || scanNitDigits.includes(siesaNitDigits);
          });
          
          displayFullResult(filteredItem, parts);
          playSuccessSound();
        } else {
          displayFullResult(filteredItem, parts);
          playSuccessSound();
        }
      } else {
        showError(`${documento}-${nit}`, "Documento no encontrado en la base de datos");
        playErrorSound();
      }
    }

    function displayFullResult(item, qrParts) {
      const totalRegistros = item.datosSiesa ? item.datosSiesa.length : 0;
      const filtradosRegistros = item.datosSiesa ? item.datosSiesa.length : 0;
      
      resultsDiv.innerHTML = `
        <div class="result-item">
          ${filtradosRegistros < totalRegistros ? `
            <div class="filter-info">
              <i class="fas fa-info-circle"></i> Mostrando ${filtradosRegistros} de ${totalRegistros} registros (filtrado por NIT ${qrParts.nit})
            </div>
          ` : ''}
          
          ${displayItemData(item, 'Datos del Documento')}
        </div>
      `;
    }

    function displayItemData(data, title = 'Datos') {
      let html = `<div class="siesa-header">${title} <span class="timestamp">${new Date().toLocaleString()}</span></div>`;
      
      // Asegurar que se muestra el lote en primer lugar, seguido de otras propiedades
      // Orden de propiedades: documento, lote, referencia, y luego el resto
      const ordenPropiedades = ['documento', 'lote', 'referencia'];
      
      // Mostrar primero las propiedades prioritarias en el orden deseado
      ordenPropiedades.forEach(propKey => {
        if (propKey in data && propKey !== 'datosSiesa') {
          html += `
            <div class="result-row">
              <div class="col-header">${formatKey(propKey)}:</div>
              <div class="json-value">${formatValue(data[propKey], propKey)}</div>
            </div>
          `;
        }
      });
      
      // Mostrar el resto de propiedades que no están en la lista de prioridad
      for (const key in data) {
        if (key === 'datosSiesa' || ordenPropiedades.includes(key)) continue;
        
        html += `
          <div class="result-row">
            <div class="col-header">${formatKey(key)}:</div>
            <div class="json-value">${formatValue(data[key], key)}</div>
          </div>
        `;
      }
      
      // Mostrar datosSiesa si existen
      if (data.datosSiesa && Array.isArray(data.datosSiesa)) {
        if (data.datosSiesa.length === 0) {
          html += `<div class="no-data" style="padding: 15px; text-align: center;"><i class="fas fa-search"></i> No hay registros que coincidan con el NIT escaneado</div>`;
        } else {
          html += `<div class="siesa-header">Documentos Relacionados <span class="badge badge-success">${data.datosSiesa.length} registros</span></div>`;
          
          data.datosSiesa.forEach((siesa, index) => {
            const estadoBadge = siesa.estado === 'Aprobadas' ? 'badge-success' : 'badge-warning';
            
            html += `<div class="siesa-item">`;
            html += `<div class="siesa-header">Factura #${index + 1} <span class="badge ${estadoBadge}">${siesa.estado || 'Sin estado'}</span></div>`;
            
            // Orden preferido para propiedades de datosSiesa
            const ordenSiesaPropiedades = ['factura', 'nit', 'lote', 'referencia', 'cantidad', 'estado', 'cliente', 'valorBruto', 'fecha', 'proovedor'];
            
            // Mostrar propiedades en el orden preferido
            ordenSiesaPropiedades.forEach(propKey => {
              if (propKey in siesa) {
                html += `
                  <div class="result-row">
                    <div class="col-header">${formatKey(propKey)}:</div>
                    <div class="json-value">${formatValue(siesa[propKey], propKey)}</div>
                  </div>
                `;
              }
            });
            
            // Mostrar cualquier propiedad adicional que no esté en la lista ordenada
            for (const key in siesa) {
              if (ordenSiesaPropiedades.includes(key)) continue;
              
              html += `
                <div class="result-row">
                  <div class="col-header">${formatKey(key)}:</div>
                  <div class="json-value">${formatValue(siesa[key], key)}</div>
                </div>
              `;
            }
            
            // Botón de entregas que maneja todo el proceso
            html += `
              <div class="action-buttons">
                <button class="delivery-btn" 
                  data-factura="${siesa.factura}"
                  onclick="procesarEntrega(
                    '${data.documento}', 
                    '${siesa.lote || data.lote}', 
                    '${siesa.referencia || data.referencia}', 
                    '${siesa.cantidad}', 
                    '${siesa.factura}', 
                    '${siesa.nit || qrParts.nit}', 
                    this
                  )">
                  <i class="fas fa-truck"></i> Procesar Entrega
                </button>
                <span class="save-success" style="display: none;">
                  <i class="fas fa-check"></i> Registro guardado
                </span>
              </div>
            `;
            
            html += `</div>`;
          });
        }
      }
      
      return html;
    }

    function formatKey(key) {
      return key
        .replace(/([A-Z])/g, ' $1')
        .replace(/^./, str => str.toUpperCase())
        .replace('columna', '')
        .trim();
    }

    function formatValue(value, key = '') {
      if (value === null || value === undefined) {
        return '<span class="no-data">N/A</span>';
      }
      
      if (typeof value === 'object') {
        return '<span class="no-data">[Datos complejos]</span>';
      }
      
      if (typeof value === 'number') {
        if (key.toLowerCase().includes('valor') || key.toLowerCase().includes('suma')) {
          return `<span class="numeric-value">${value.toLocaleString('es-CO')}</span>`;
        }
        return value.toString();
      }
      
      if (typeof value === 'boolean') {
        return value ? 'Sí' : 'No';
      }
      
      return value.toString();
    }

    function showError(barcode, message = "Código no encontrado") {
      resultsDiv.innerHTML = `
        <div class="error">
          <i class="fas fa-times-circle"></i> ${message}: <strong>${barcode}</strong>
        </div>
      `;
    }
  </script>
</body>
</html>
